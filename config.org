#+STARTUP: fold
-*- lexical-binding: t -*-
* Basic
#+begin_src elisp
     
  ;; Basic clean configuration
  (setq inhibit-startup-message t)
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq use-short-answers t)
#+end_src
#+begin_src elisp 
  ;; (defvar default-font "JetBrains Mono")
  (defvar default-font "DejaVu Sans Mono")
  (defvar default-font-size 14)

  (defun open-config-file ()
    "Åbn config.org"
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  
  (global-set-key (kbd "C-c i") 'open-config-file)
#+end_src

** loadpath
#+begin_src elisp
  ;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa/typst-preview/"))
#+end_src
* Package management setup
#+begin_src elisp 
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)
#+end_src
* Custom variables and faces
#+begin_src elisp 
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(company company-org-block consult corfu evil marginalia orderless
  	     org-modern vertico which-key-posframe)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src


* Udseende, styling, fonts og themes
** Themes
#+begin_src elisp 
  ;; (load-theme 'tango-dark t)
  (load-theme 'wombat t)
#+end_src
** Fonts
#+begin_src elisp :lexical no
  (set-face-attribute 'default nil
        		    ;;:family default-font
        		    ;;:height (* default-font-size 10))
        		    ;; :font "DejaVu Sans Mono-14") ;; erstat med ønsket font og størrelse
        		    :font "Fira Code Retina" :height 140)
    ;; (use-package fira-code-mode
    ;;   :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
    ;;   :hook prog-mode) ;; Enables fira-code-mode automatically for programming major modes
      ;; Enable the www ligature in every possible major mode

  ;;  Enable ligatures in programming modes                                                           
  (use-package ligature
     :config
     (ligature-set-ligatures 't '("www"))
     (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                          ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                          "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                          "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                          "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                          "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                          "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                          "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                          "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                          "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))
     (global-ligature-mode 't))

#+end_src
* Input modes og modalities
** Tegn
#+begin_src elisp
  (add-hook 'text-mode-hook (lambda () (set-input-method "danish-postfix")))
#+end_src

** evil
#+begin_src elisp 
    (use-package evil
      :ensure t
      :init
      (setq evil-want-keybinding nil)
      (setq evil-want-integration t)
      (setq evil-want-C-u-scroll t)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
      (define-key evil-insert-state-map (kbd "C-e") 'end-of-line))
        
    (use-package evil-collection
      :ensure t
      :after evil
      :config
          (evil-collection-init))
    (use-package evil-escape
      :ensure t
      :config
      (evil-escape-mode 1)
      (setq evil-escape-key-sequence "hh")
      (setq evil-escape-delay 0.2)) ;; ventetid i sekunder for sekvensen



    (use-package evil-surround
      :ensure t
      :after evil 
      :config
      (global-evil-surround-mode 1))

    (use-package evil-nerd-commenter
      :ensure t
      :after evil
      :config
      (evilnc-default-hotkeys))


    (use-package evil-cleverparens
      :ensure t
      :hook ((lisp-mode emacs-lisp-mode scheme-mode clojure-mode) . 
    	 evil-cleverparens-mode))
    (use-package evil-indent-plus
      :ensure t
      :config
      (evil-indent-plus-default-bindings))

  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode)
    
    ;; Juster duration (hvor længe highlight vises)
    (setq evil-goggles-duration 0.100) ; 100ms (default er 200ms)
    
    ;; Enable alle highlights
    (setq evil-goggles-enable-delete t)
    (setq evil-goggles-enable-change t)
    (setq evil-goggles-enable-yank t)
    (setq evil-goggles-enable-paste t)
    (setq evil-goggles-enable-indent t)
    (setq evil-goggles-enable-join t)
    (setq evil-goggles-enable-fill-and-move t)
    (setq evil-goggles-enable-shift t))

  (use-package evil-mc
  :ensure t
  :config
  (global-evil-mc-mode 1))

  (use-package evil-matchit
    :ensure t
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-numbers
    :ensure t) 

  (use-package evil-args
  :config
  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

  ;; bind evil-forward/backward-args
  (define-key evil-normal-state-map "L" 'evil-forward-arg)
  (define-key evil-normal-state-map "H" 'evil-backward-arg)

  ;; swapping arguments
  (define-key evil-normal-state-map "gL" 'evil-forward-arg)
  (define-key evil-normal-state-map "gH" 'evil-backward-arg))

  (use-package evil-lion
    :ensure t
    :config
    (evil-lion-mode))

  (use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () (evil-org-mode)))
  :config

  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

  (use-package evil-visualstar
  :config
  (global-evil-visualstar-mode))

  #+end_src
    
** meow
#+begin_src elisp 
    (use-package meow
      :ensure t
      :defer t
      :config
      (defun meow-setup ()
        (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
        (meow-motion-overwrite-define-key
         '("j" . meow-next)
         '("k" . meow-prev)
         '("<escape>" . ignore))
        (meow-leader-define-key
         '("j" . "H-j")
         '("k" . "H-k")
         '("1" . meow-digit-argument)
         '("2" . meow-digit-argument)
         '("3" . meow-digit-argument)
         '("4" . meow-digit-argument)
         '("5" . meow-digit-argument)
         '("6" . meow-digit-argument)
         '("7" . meow-digit-argument)
         '("8" . meow-digit-argument)
         '("9" . meow-digit-argument)
         '("0" . meow-digit-argument)
         '("/" . meow-keypad-describe-key)
         '("?" . meow-cheatsheet))
        (meow-normal-define-key
         '("0" . meow-expand-0)
         '("9" . meow-expand-9)
         '("8" . meow-expand-8)
         '("7" . meow-expand-7)
         '("6" . meow-expand-6)
         '("5" . meow-expand-5)
         '("4" . meow-expand-4)
         '("3" . meow-expand-3)
         '("2" . meow-expand-2)
         '("1" . meow-expand-1)
         '("-" . negative-argument)
         '(";" . meow-reverse)
         '("," . meow-inner-of-thing)
         '("." . meow-bounds-of-thing)
         '("[" . meow-beginning-of-thing)
         '("]" . meow-end-of-thing)
         '("a" . meow-append)
         '("A" . meow-open-below)
         '("b" . meow-back-word)
         '("B" . meow-back-symbol)
         '("c" . meow-change)
         '("d" . meow-delete)
         '("D" . meow-backward-delete)
         '("e" . meow-next-word)
         '("E" . meow-next-symbol)
         '("f" . meow-find)
         '("g" . meow-cancel-selection)
         '("G" . meow-grab)
         '("h" . meow-left)
         '("H" . meow-left-expand)
         '("i" . meow-insert)
         '("I" . meow-open-above)
         '("j" . meow-next)
         '("J" . meow-next-expand)
         '("k" . meow-prev)
         '("K" . meow-prev-expand)
         '("l" . meow-right)
         '("L" . meow-right-expand)
         '("m" . meow-join)
         '("n" . meow-search)
         '("o" . meow-block)
         '("O" . meow-to-block)
         '("p" . meow-yank)
         '("q" . meow-quit)
         '("Q" . meow-goto-line)
         '("r" . meow-replace)
         '("R" . meow-swap-grab)
         '("s" . meow-kill)
         '("t" . meow-till)
         '("u" . meow-undo)
         '("U" . meow-undo-in-selection)
         '("v" . meow-visit)
         '("w" . meow-mark-word)
         '("W" . meow-mark-symbol)
         ;;'("x" . meow-line)
         '("X" . meow-goto-line)
         '("y" . meow-save)
         '("Y" . meow-sync-grab)
         '("z" . meow-pop-selection)
         '("'" . repeat)
         '("<escape>" . ignore)))

      (meow-setup)
      (meow-global-mode 0)
      :bind ("C-c t m" . toggle-modal-mode))  ;; Start disabled

  ;; Toggle function
  (defvar modal-mode 'evil
    "Current modal editing mode: 'evil or 'meow")

  (defun toggle-modal-mode ()
    "Toggle between Evil mode and Meow mode."
    (interactive)
    (cond
     ((eq modal-mode 'evil)
      (evil-mode -1)
      (meow-global-mode 1)
      (setq modal-mode 'meow)
      (message "Switched to Meow mode (SPC x ? for cheatsheet)"))
     ((eq modal-mode 'meow)
      (meow-global-mode -1)
      (evil-mode 1)
      (evil-collection-init)
      (setq modal-mode 'evil)
      (message "Switched to Evil mode"))))

  ;; Vælg hvilken mode der skal starte
  (if (eq modal-mode 'evil)
      (progn
        (evil-mode 1)
        (evil-collection-init))
    (meow-global-mode 1))

  ;; Bind toggle
  (global-set-key (kbd "C-c t m") 'toggle-modal-mode)
#+end_src

** auto-complete - company og corfu
#+begin_src elisp 
        (use-package company
          :ensure t
          :hook ((prog-mode . company-mode)
  	       (org-mode . company-mode)
  	       (text-mode . company-mode)))
        ;;(global-company-mode 1)

        (use-package company-org-block
          :ensure t
          :init
          (setq company-org-block-edit-style 'auto)) ;; Justér efter behov
          
        ;;(setq company-org-block-edit-style 'auto) ;; Justér efter behov

        (add-hook 'org-mode-hook
                  (lambda ()
                    (add-to-list (make-local-variable 'company-backends)
                                 'company-org-block)))


        ;;(use-package corfu
  ;;	:ensure t)
        ;;(global-corfu-mode -1)
#+end_src

** embark
#+begin_src elisp :lexical no
  (use-package embark
    :ensure t
    :defer t
    :bind (("C-." . embark-act)
           ("C-;" . embark-dwim)
           ("C-h B" . embark-bindings)
           :map minibuffer-local-map
           ("C-." . embark-act)
           ("C-c C-e" . embark-export))
    
    :init
    ;; Vis hjælp for prefixes med embark
    (setq prefix-help-command #'embark-prefix-help-command)
    
    :config
    ;; Skjul standard modeline i embark
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** rainbow
#+begin_src elisp :lexical no
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode org-mode) . rainbow-delimiters-mode))
#+end_src
** line-numbers
#+begin_src elisp :lexical no
  ;; Turn on line numbers in buffer
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
** yasnippet
#+begin_src elisp 
  (use-package yasnippet
   :ensure t
   :hook ((prog-mode text-mode conf-mode snippet-mode) . yas-minor-mode)
   :config
   (yas-global-mode 1))

  (use-package consult-yasnippet
    :ensure t
    :after (consult yasnippet)
    :bind
    ("C-c y y" . consult-yasnippet)
    ("C-c y s" . yas-insert-snippet)
    ("C-c y n" . yas-new-snippet)
    ("C-c y v" . yas-visit-snippet-file))
  
#+end_src

* Minibuffer og commands
** which-key
#+begin_src elisp 
         (use-package which-key
           :ensure t
           :defer 3
           :diminish which-key-mode
           :config
           (which-key-mode))
#+end_src
** vertico
#+begin_src elisp 
  (use-package vertico
    :ensure t
    :demand t
    :bind (:map vertico-map
  	      ;; Navigation
                ("C-j" . vertico-next)
  	      ("C-k" . vertico-previous)
                ("C-d" . vertico-scroll-down)
                ("C-u" . vertico-scroll-up)
                ;; Directory navigation (vertico-directory)
                ("C-h" . vertico-directory-delete-char)
                ("C-l" . vertico-directory-enter)
                ("M-h" . vertico-directory-delete-word))
    :config
    (vertico-mode 1))
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
** orderless
#+begin_src elisp
  (use-package orderless
     :ensure t
     :custom
     (completion-styles '(orderless basic))
     (completion-category-defaults nil)
     (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src
** marginalia
#+begin_src elisp

   (use-package marginalia
     :ensure t
     :config
     (marginalia-mode))
#+end_src

* Modeline
** doom modeline
#+begin_src elisp :lexical no
  (use-package doom-modeline
  	      :ensure t
  	      :init
  	      (doom-modeline-mode 1)
  	      :custom ((doom-modeline-height 15)))
  
#+end_src
* Custom funktioner
#+begin_src elisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file))

  (defun open-init-file ()
    "Åbn din init.el hurtigt."
    (interactive)
    (find-file user-init-file))


  (defun comic-sans ()
    (interactive)
    (set-face-attribute 'default nil
        		      :font "Comic Sans MS"))

  (defun enable-corfu ()
    (interactive)
    (global-corfu-mode 1)
    (company-mode -1)
    (message "Corfu enabled"))

  (defun enable-company ()
    (interactive)
    (global-corfu-mode -1)
    (company-mode 1)
    (message "Company enabled"))

  (defun show-load-path ()
    "Vis load-path i en midlertidig buffer."
    (interactive)
    (with-output-to-temp-buffer "*Load Path*"
      (princ (mapconcat #'identity load-path "\n"))))

  (global-set-key (kbd "C-c l") 'show-load-path)

  (defun my/consult-ripgrep-at-point ()
    "Search for word at point with consult-ripgrep"
    (interactive)
    (consult-ripgrep nil (thing-at-point 'symbol)))

  (defun my/dired-preview-toggle ()
    "Toggle dired-preview-mode."
    (interactive)
    (if (bound-and-true-p dired-preview-mode)
        (dired-preview-mode -1)
      (dired-preview-mode 1)))


  ;; Den er ret langsom, men kan evt. være en start.

  (defun show-all-registers-in-buffer ()
    "Vis alle Emacs registra i en ny buffer."
    (interactive)
    (let ((buf (get-buffer-create "*Registers*")))
      (with-current-buffer buf
        (read-only-mode -1)
        (erase-buffer)
        (insert "Emacs Registers:\n\n")
        ;; Gå gennem alle mulige registertegn (ASCII 32-126)
        (dolist (reg (mapcar #'char-to-string (number-sequence 32 126)))
          (let ((content (get-register (string-to-char reg))))
            (when content
              (insert (format "Register %s:\n" reg))
              ;; Hvis content er en string indsættes den direkte
              (if (stringp content)
                  (insert (concat content "\n\n"))
                ;; Ellers forsøges at konvertere til string (eksempelvis point position)
                (insert (format "%S\n\n" content))))))
        (read-only-mode 1)
        (goto-char (point-min)))
      (pop-to-buffer buf)))


#+end_src
** window management
#+begin_src elisp
    (defun +evil/window-move-left ()
    "Move window to the left or create new window if none exists."
    (interactive)
    (progn
      (evil-window-vsplit)
      (evil-window-left 1)))

  (defun +evil/window-move-right ()
    "Move window to the right or create new window if none exists."
    (interactive)
    (progn
      (evil-window-vsplit)
      (evil-window-right 1)))

  (defun +evil/window-move-up ()
    "Move window up or create new window if none exists."
    (interactive)
    (progn
       (evil-window-split)
       (evil-window-up 1)))

  (defun +evil/window-move-down ()
    "Move window down or create new window if none exists."
    (interactive)
    (progn
       (evil-window-split)
       (evil-window-down 1)))
#+end_src

* Custom keybindings
** Generalle keybindings
#+begin_src elisp 
  ;;(global-set-key (kbd "C-c i i") 'comis-sans) 

  ;; Genvejstaster til at skifte
  (global-set-key (kbd "C-c c") 'enable-corfu)
  (global-set-key (kbd "C-c p") 'enable-company)
#+end_src
** General.el
#+begin_src elisp
  (use-package general
    :config
    (general-create-definer my-leader-def
      :states '(normal visual emacs)
      :keymaps 'override
      :prefix "SPC")
    
    (my-leader-def

      ;; Shortcuts
      "," 'switch-to-buffer
      "rr" 'reload-init-file
      "RET" 'bookmark-jump
      

      ;; buffers
      "b" '(:ignore t :which-key "buffers")
      "bb" 'switch-to-buffer
      "bk" 'kill-buffer
      ;;"bl" 'list-buffers
      "bl" 'next-buffer
      "bh" 'previous-buffer


      ;; frames
      ;; "a" '(:ignore t :which-key "frames")
      ;; embark
      "a" '(embark-act :which-key "embark act")
      "A" '(embark-dwim :which-key "embark dwim")
      
      ;; consult
      "c" '(:ignore t :which-key "consult")
      "cy" 'consult-yank-pop
      "cb" 'consult-buffer

      ;; dired
      "d" '(:ignore t :which-key "dired")
      "dp" #'my/dired-preview-toggle 

      ;; files
      "f" '(:ignore t :which-key "files")
      "ff" 'find-file
      "fs" 'save-buffer
      "fr" 'open-recent-files
      "fS" 'write-file
      "fW" 'write-region
      "fo" 'ff-find-other-file
      "fO" 'ff-find-other-file-other-window 
      
      ;; help
      "h" '(:ignore t :which-key "help")
      "hk" 'describe-key
      "hK" 'describe-keymap
      "hm" 'describe-mode
      "hb" 'describe-bindings

      ;; lsp
      "ll" '(:ignore t :which-key "lsp")
      "la" 'lsp-execute-code-action        ;; code actions
      "lr" 'lsp-rename                      ;; rename symbol
      "lf" 'lsp-format-buffer               ;; format
      "lF" 'lsp-format-region               ;; format region
      "ld" 'lsp-find-definition             ;; go to definition
      "lD" 'lsp-find-declaration            ;; go to declaration
      "li" 'lsp-find-implementation         ;; go to implementation
      "lt" 'lsp-find-type-definition        ;; go to type def
      "lR" 'lsp-find-references             ;; find references
      "ls" 'lsp-describe-thing-at-point     ;; show docs
      "lh" 'lsp-ui-doc-show                 ;; show hover
      "ll" 'lsp-workspace-show-log          ;; show log
      "lq" 'lsp-workspace-restart         ;; restart 		   
      "lK" 'lsp-ui-doc-show           ;; Hover docs
      "lgd" 'lsp-ui-peek-find-definitions
      "lgp" 'lsp-ui-peek-find-references

       ;;;;
  ;; org
       ;;;;
  "mc" 'org-capture 

  ;; org-agenda
  "m" '(:ignore t :which-key "org-agenda")
  "mt" 'org-todo
  "ma" 'org-agenda

  ;; org-roam
  ;; Find/Create
  "nr" '(:ignore t :which-key "nodes")
  "nrf" '(org-roam-node-find :which-key "find node")
  "nri" '(org-roam-node-insert :which-key "insert node")

  "nc" '(org-roam-capture :which-key "capture")

  ;; Buffer/Graph
  "nl" '(org-roam-buffer-toggle :which-key "toggle buffer")
  "ng" '(org-roam-graph :which-key "graph")
  "nu" '(org-roam-ui-open :which-key "ui")

  ;; Dailies
  "nd" '(:ignore t :which-key "dailies")
  "ndt" '(org-roam-dailies-goto-today :which-key "today")
  "ndd" '(org-roam-dailies-goto-date :which-key "date")
  "ndy" '(org-roam-dailies-goto-yesterday :which-key "yesterday")
  "ndm" '(org-roam-dailies-goto-tomorrow :which-key "tomorrow")
  "ndc" '(org-roam-dailies-capture-today :which-key "capture today")

  ;; Sync
  "ns" '(org-roam-db-sync :which-key "sync db")
  ;; "n" '(:ignore t :which-key "org-roam")
  ;; "ni" 'org-roam-node-insert
  ;; "nf" 'org-roam-node-find
  ;; "nl" 'org-roam-buffer-toggle
  ;; "nc" 'org-roam-capture 

  ;; projectile
  "p" '(:ignore t :which-key "project")
  "pp" 'projectile-switch-project
  "pf" 'projectile-find-file
  "pb" 'projectile-switch-to-buffer
  "pd" 'projectile-find-dir
  "pr" 'projectile-recentf
  "pc" 'projectile-compile-project
  "pR" 'projectile-run-project
  "ps" 'consult-ripgrep

  ;; olivetti
  "t" '(:ignore t :which-key "olivetti")
  "tf" '(my/distraction-free :which-key "focus mode")

  ;; consult-line
  "/" 'consult-line
  "s" '(:ignore t :which-key "search")
  "ss" 'consult-line
  "sl" 'consult-line
  ;; consult-rigprep
  "sp" 'consult-ripgrep
  "sw" '(my/consult-ripgrep-at-point :which-key "consult-ripgrep on word under cursor")

  ;; vterm
  "v" '(:ignore t :which-key "vterm")
  "vt" 'multi-vterm
  "vk" 'multi-vterm-next
  "vj" 'multi-vterm-prev
  "vd" 'multi-vterm-dedicated-toggle

  ;; windows
  "w" '(:ignore t :which-key "windows")
  "wh" 'evil-window-left
  "wH" '+evil/window-move-left
  "wk" 'evil-window-up
  "wK" '+evil/window-move-up
  "wj" 'evil-window-down
  "wJ" '+evil/window-move-down
  "wl" 'evil-window-right
  "wL" '+evil/window-move-right
  "wd" 'delete-window 
  "wn" 'evil-window-new
  "wv" 'split-window-right
  "ws" 'split-window-below
  ;; frames

  "wN" 'make-frame
  "wC" 'clone-frame
  "wcs" '((lambda () (interactive) (set-frame-font "Comic Sans MS")) :which-key "Comic Sans Frame") 

  ;; quit
  "q" '(:ignore t :which-key "quit")
  "qq" 'save-buffers-kill-terminal

  ;;evil-numbers
  "+" 'evil-numbers/inc-at-pt
  "-" 'evil-numbers/dec-at-pt)



      ;;;;;;
  ;; keybindings uden leader key
      ;;;;;;
  (general-define-key
   :states 'emacs
   "bb" '(previous-buffer :which-key "Buffer back")
   "BB" '(next-buffer :which-key "Buffer forward"))

  (general-define-key
   :states 'visual
   "*" 'evil-visualstar/begin-search-forward
   "#" 'evil-visualstar/begin-search-backward)


  (general-define-key
   :states 'normal
   "/" 'consult-line
   "?" 'consult-line
   "C->" 'lispyville->
   "C-<" 'lispyville-<)

  ;; (general-define-key
  ;;  :keymap 'dired-mode-map

  (general-create-definer my-evil-mc-def
    :states '(normal visual)
    :prefix "gr"
    :prefix-name "evil-mc")

  (my-evil-mc-def
    "" '(:ignore t :which-key "evil-mc")
    "m" '(evil-mc-make-and-goto-next-match :wk "match →")
    "M" '(evil-mc-make-and-goto-prev-match :wk "match ←")
    "j" '(evil-mc-make-cursor-move-next-line :wk "↓")
    "k" '(evil-mc-make-cursor-move-prev-line :wk "↑")
    "J" '(evil-mc-make-cursor-move-last-line :wk "last ↓")
    "K" '(evil-mc-make-cursor-move-first-line :wk "first ↑")
    "u" '(evil-mc-undo-last-added-cursor :wk "undo")
    "q" '(evil-mc-undo-all-cursors :wk "quit")
    "p" '(evil-mc-pause-cursors :wk "pause")
    "r" '(evil-mc-resume-cursors :wk "resume"))

  ;; Visual mode extras
  (general-define-key
   :states 'visual
   :prefix "gr"
   "A" '(evil-mc-make-cursor-in-visual-selection-beg :wk "each line")
   "I" '(evil-mc-make-cursor-in-visual-selection-end :wk "line start")
   "a" '(evil-mc-make-all-cursors :wk "all matches")))

  ;; ;; Definer 'gz' prefix for evil-mc
  ;; (general-define-key
  ;;  :states '(normal visual)
  ;;  "gz" '(:ignore t :which-key "evil-mc"))

  ;; ;; Evil-mc bindings under 'gz'
  ;; (general-define-key
  ;;  :states '(normal visual)
  ;;  :prefix "gz"
  ;;  "m" '(evil-mc-make-and-goto-next-match :which-key "match forward")
  ;;  "M" '(evil-mc-make-and-goto-prev-match :which-key "match backward")
  ;;  "j" '(evil-mc-make-cursor-move-next-line :which-key "cursor down")
  ;;  "k" '(evil-mc-make-cursor-move-prev-line :which-key "cursor up")
  ;;  "J" '(evil-mc-make-cursor-move-last-line :which-key "cursor to last line")
  ;;  "K" '(evil-mc-make-cursor-move-first-line :which-key "cursor to first line")
  ;;  "u" '(evil-mc-undo-last-added-cursor :which-key "undo last cursor")
  ;;  "q" '(evil-mc-undo-all-cursors :which-key "quit all cursors")
  ;;  "p" '(evil-mc-pause-cursors :which-key "pause cursors")
  ;;  "r" '(evil-mc-resume-cursors :which-key "resume cursors"))

  ;; ;; Visual mode specifikke bindings
  ;; (general-define-key
  ;;  :states 'visual
  ;;  :prefix "gz"
  ;;  "A" '(evil-mc-make-cursor-in-visual-selection-beg :which-key "cursor each line")
  ;;  "I" '(evil-mc-make-cursor-in-visual-selection-end :which-key "cursor line start")
  ;;  "a" '(evil-mc-make-all-cursors :which-key "all matches")))


  (use-package key-chord
    :ensure t
    :config
    (setq key-chord-one-key-delay 0.2)
    (key-chord-mode 1)
    (key-chord-define evil-normal-state-map "bb" 'previous-buffer)
    (key-chord-define evil-normal-state-map "BB" 'next-buffer)
    (key-chord-define evil-motion-state-map "bb" 'previous-buffer)
    (key-chord-define evil-motion-state-map "BB" 'next-buffer))

    #+end_src

    #+RESULTS:
    : t

* org
** org og org-modern
#+begin_src elisp 
  (use-package org
    :defer t
    :mode ("\\.org\\'" . org-mode)
    :commands (org-capture org-agenda))
    
    (use-package org-modern
      :ensure t
      :after org
      :hook ((org-mode . org-modern-mode)
  	   (org-mode . org-indent-mode)))
      
      ;; (add-hook 'org-mode-hook #'org-modern-mode)
      ;; (add-hook 'org-mode-hook 'org-indent-mode))

  (setq org-todo-keywords
          '((sequence
             "TODO(t)"
             "PROJ(p)"
             "STRT(s)"
             "WAIT(w)"
             "HOLD(h)"
             "|"
             "DONE(d)"
             "KILL(k)")
            (sequence
             "[ ](T)"
             "[-](S)"
             "[?](W)"
             "|"
             "[X](D)")))
    
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "#ff6c6b" :weight bold))
          ("PROJ" . (:foreground "#da8548" :weight bold))
          ("STRT" . (:foreground "#ECBE7B" :weight bold))
          ("WAIT" . (:foreground "#51afef" :weight bold))
          ("HOLD" . (:foreground "#c678dd" :weight bold))
          ("DONE" . (:foreground "#98be65" :weight bold))
          ("KILL" . (:foreground "#5B6268" :weight bold))
          ("[ ]"  . (:foreground "#ff6c6b" :weight bold))
          ("[-]"  . (:foreground "#ECBE7B" :weight bold))
          ("[?]"  . (:foreground "#51afef" :weight bold))
          ("[X]"  . (:foreground "#98be65" :weight bold))))
#+end_src
** org-capture-templates
#+begin_src elisp
  (setq org-capture-templates
  '(("t" "Tasks")
    ("tt" "Unscheduled task" entry (file+headline "~/Documents/org/agenda/inbox.org" "Tasks")
     "* TODO %?")
    ("tD" "Task with deadline" entry (file+headline "~/Documents/org/agenda/inbox.org" "Task with deadline")
     "* TODO %? DEADLINE: %^{Deadline date}t\n %i"
     :time-prompt t)
     ("ts" "Scheduled task" entry (file+headline "~/Documents/org/agenda/dayplanner.org" "Tasks")
     "* TODO %? SCHEDULED: %^{Schedule date}t\n  %i\n"
     :time-prompt t)
    ("td" "Scheduled task with deadline" entry (file+headline "~/Documents/org/agenda/dayplanner.org" "Tasks")
     "* TODO %? SCHEDULED: %^{Schedule date}t DEADLINE: %^{Deadline}t\n  %i\n"
     :time-prompt t)

    ;; ("md" "Daily entry" entry
    ;;  (file+datetree "~/Documents/org/moodnotes.org")
    ;;  "* Dagens rating: %? \n** Uro: \n** Noter: \n** Motion: \n** Vågen: \n** Sengetid: \n** Medicin:")
    ;; ("mu" "Uddybende noter" entry
    ;;  (file+datetree "~/Documents/org/moodnotes.org")
    ;;  "Noter: %?")

    ("d" "Dayplanner")
    ("dd" "Dayplanner" entry
     (file+datetree "~/Documents/org/agenda/dayplanner.org")
     "** Morgen \n*** [ ] Aflever\n*** [ ] Tossefit\n** Formiddag \n %? \n** Frokost \n\n** Eftermiddag \n\n** Eftermiddag 2 \n*** [ ] Hente \n*** [ ] Tossefit \n** Aften "
     :time-prompt t)
    ("dt" "Task in dayplanner" entry
     (file+datetree "~/Documents/org/agenda/dayplanner.org")
     "TODO %?"
     :time-prompt t)
    ("dc" "Task in dayplanner with link to context" entry
     (file+datetree "~/Documents/org/agenda/dayplanner.org")
     "TODO %?\n %a"
     :time-prompt t)
    ("dn" "Add note to a day in dayplanner" entry
     (file+datetree "~/Documents/org/agenda/dayplanner.org")
     "** Note: %?"
     :time-prompt t)

    ("e" "Emails")
    ("eu" "Urgent response" entry
     (file+headline "~/Documents/org/agenda/inbox.org" "Urgent emails")
     "* TODO Respond to %? DEADLINE: %^{Deadline date}t \nSubject: ")
    ("en" "Non-urgent response" entry
     (file+headline "~/Documents/org/agenda/inbox.org" "Non-urgent emails")
     "* TODO Respond to %? \n Subject: ")))

  ;; (add-hook 'org-capture-after-finalize-hook
  ;;         (lambda ()
  ;;           (when (and (derived-mode-p 'org-mode)
  ;;                      (string= org-capture-entry "ts")) ;; "t" er template key
  ;;             (org-sort-entries nil ?d))))



    
#+end_src
** org-bable
#+begin_src elisp

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (shell . t) ;; Tilføj andre sprog du ønsker at aktivere
         ))

    (setq org-confirm-babel-evaluate nil)
    (setq org-babel-python-command "python3")
#+end_src
** org-agenda
#+begin_src elisp 
          ;; Set the directory where your Org files are located
  (with-eval-after-load 'org
    (setq org-agenda-files (directory-files-recursively "~/Documents/org/agenda" "\\.org$")))
  (message "%s" org-agenda-files)

    ;;  (setq org-agenda-files (directory-files-recursively "~/Documents/org/agenda" "\\.org$"))
      ;; (setq org-agenda-files (directory-files-recursively "~/Documents/org/agenda/" "\\.org$"))
           (use-package org-superstar
             :hook (org-mode . org-superstar-mode)
             :config
             ;; Customize the bullets for headings
             (setq org-superstar-headline-bullets-list '("★" "◉" "○" "•" "◆"))
             ;; Customize list item bullets (optional)
             (setq org-superstar-item-bullet-alist '((?- . ?•) (?+ . ?◦)))
             ;; Remove leading stars if desired
             (setq org-superstar-remove-leading-stars t))
         ;; Archive tasks to a separate file in the same directory
         (setq org-archive-location "%%s_archive::")
      (use-package org-super-agenda
        :ensure t
        :after org
        :config
        (org-super-agenda-mode 1)
        (setq org-super-agenda-groups
      	'((:name "Today"
      		 :time-grid t
      		 :date today)
                (:name "Important"
      		 :priority "A")
                (:name "Due Soon"
      		 :deadline future)
                (:name "Overdue"
      		 :deadline past
      		 :face error)
                (:name "To Read"
      		 :tag "read")
                (:name "Waiting"
      		 :todo "WAIT")
                (:name "Personal"
      		 :tag "personal")
                (:name "Work"
      		 :tag "work"))))

#+end_src
** org-roam
#+begin_src elisp
    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :commands (org-roam-node-find
  	       org-node-insert
  	       org-roam-buffer-toggle)
      :custom
      (org-roam-directory "~/Documents/org/org-roam/")  ; Din org-roam mappe
      (org-roam-completion-everywhere t)
      ;; :bind (("C-c n l" . org-roam-buffer-toggle)
      ;;        ("C-c n f" . org-roam-node-find)
      ;;        ("C-c n i" . org-roam-node-insert)
      ;;        ("C-c n c" . org-roam-capture)
      ;;        ("C-c n j" . org-roam-dailies-capture-today))
      :config
      (org-roam-db-autosync-mode))

  (use-package ts
    :ensure t)

    (use-package org-roam-ui
      :ensure t
      :after org-roam
      :custom
      (org-roam-ui-sync-theme t)
      (org-roam-ui-follow t)
      (org-roam-ui-update-on-save t)
      (org-roam-ui-open-on-start t))
#+end_src

* LSP
** lsp-mode
#+begin_src elisp 
  (use-package lsp-mode
    :ensure t
    :hook ((c-mode . lsp)
           (c-ts-mode . lsp)
           (csharp-mode . lsp)
           (sh-mode . lsp-deferred)
           (typst-ts-mode . lsp-deferred))
    
    :commands (lsp lsp-deferred)
    :custom
    (lsp-typst-server-path "tinymist")
    (lsp-enable-symbol-highlighting t)
    (lsp-headerline-breadcrumb-enable t)
    :config
    (add-to-list 'lsp-language-id-configuration '(typst-ts-mode . "typst"))
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection '("tinymist"))
      :activation-fn (lsp-activate-on "typst")
      :server-id 'tinymist
      :major-modes '(typst-ts-mode))))

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions t)
    :hook (lsp-mode . lsp-ui-mode))

#+end_src

* Debugger
** dap-mode
#+begin_src elisp 
  (use-package dap-mode
    :ensure t
    :after lsp-mode
    :config
    (dap-auto-configure-mode)
    (require 'dap-lldb)
    (dap-ui-mode 1)

    (setq dap-lldb-debug-program '("/Library/Developer/CommandLineTools/usr/bin/lldb-dap"))
    ;; Sti til lldb-dap
    ;; (setq dap-lldb-debug-program '("/opt/homebrew/opt/llvm/bin/lldb-dap"))

    ;; debug keybindings
    (define-key dap-mode-map (kbd "<f5>") 'dap-debug)
    (define-key dap-mode-map (kbd "<f6>") 'dap-disconnect)
    (define-key dap-mode-map (kbd "<f9>") 'dap-breakpoint-toggle)
    (define-key dap-mode-map (kbd "<f10>") 'dap-next))
    ;;(define-key dap-mode-map (kbd "D") 'dap-ui-delete-session))

#+end_src

* Terminal
** vterm
#+begin_src elisp
  (use-package vterm
    :ensure t)
  (use-package multi-vterm
    :ensure t
    :config
    (setq multi-vterm-dedicated-height-percent 30)
    ;;(global-set-key (kbd "C-v d") #'multi-vterm-dedicated-toggle)
    )

  (use-package vterm-hotkey
    :ensure t)
#+end_src

* magit
#+begin_src elisp 
  (use-package transient
  :ensure t)

  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
  
    ;; :custom
    ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; (use-package evil-magit
  ;;   :ensure t
  ;;   :after magit)
#+end_src
* dired
** dired
#+begin_src elisp 
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom
    (dired-listing-switches "-agho --group-directories-first")
    :config
    (setq dired-create-destination-dirs 'ask)
    (general-define-key
     :states 'normal
     :keymaps 'dired-mode-map
     
     ;; Navigation (Vim-style)
     "h" 'dired-up-directory
     "l" 'dired-find-file
     "j" 'dired-next-line
     "k" 'dired-previous-line
     "gg" 'beginning-of-buffer
     "G" 'end-of-buffer
     
     ;; Actions
     "o" 'dired-find-file-other-window
     "v" 'dired-view-file
     "q" 'quit-window
     
     ;; File operations
     "d" 'dired-flag-file-deletion
     "x" 'dired-do-flagged-delete
     "D" 'dired-do-delete
     
     ;; Marking
     "m" 'dired-mark
     "u" 'dired-unmark
     "U" 'dired-unmark-all-marks
     
     ;; Create
     "+" 'dired-create-directory))
    
    ;; Leader bindings
    ;;(my-leader-def
      ;;:keymaps 'dired-mode-map
     ;; "," 'dired-up-directory
      ;;"." 'dired-find-file))
#+end_src
** dired-preview
#+begin_src elisp
  (use-package dired-preview
    :ensure t)
    ;;:hook (dired-mode . dired-preview-mode))
#+end_src


* consult
** consult
#+begin_src elisp
         (use-package consult
           :ensure t
           :defer t)
   ;;      (global-set-key (kbd "C-x e") #'consult-buffer)
#+end_src
** consult-ripgrep
#+begin_src elisp
  ;; Customize ripgrep args
  (setq consult-ripgrep-args
        "rg --null --line-buffered --color=never --max-columns=1000 \
         --path-separator / --smart-case --no-heading \
         --with-filename --line-number --search-zip \
         --hidden")  ;; tilføj --hidden for at søge i skjulte filer
    ;;(setq consult-ripgrep-args "rg --hidden --glob '!**/.dSYM/' --glob '!**/*#' --line-number --color=never --smart-case --no-heading --null")

#+end_src
* projectile
#+begin_src elisp
  (use-package projectile
    :ensure t
    :demand t
    :init
    ;; C compile kommando 
    (setq projectile-project-compilation-cmd "make")
    ;; (setq projectile-globally-ignored-directories
    ;;   '(".dSYM" "build" ".git"))

    ;; (setq projectile-globally-ignored-files
    ;;   '("#*" "~*" ))  ;; Ignorer filer som ender med #



    :config
    (projectile-mode +1)
    ;; Ignore directories
    ;; (add-to-list 'projectile-globally-ignored-directories "build")
    ;; (add-to-list 'projectile-globally-ignored-directories "bin")
    ;; (add-to-list 'projectile-globally-ignored-directories ".obj")
    ;; (add-to-list 'projectile-globally-ignored-directories "**.dSYM")

    ;; Ignore files
    ;; (add-to-list 'projectile-globally-ignored-files "*.o")
    ;; (add-to-list 'projectile-globally-ignored-files "*.a")
    ;; (add-to-list 'projectile-globally-ignored-files "*.so")
    ;; (add-to-list 'projectile-globally-ignored-files "*.*~")
    ;; (add-to-list 'projectile-globally-ignored-files "*.*#")
    ;; (add-to-list 'projectile-globally-ignored-file-suffixes "")
    (setq projectile-globally-ignored-directories
  	(append projectile-globally-ignored-directories '("build" "bin" ".obj")))
    (setq projectile-globally-ignored-files
  	(append projectile-globally-ignored-files '("*.0" "*.a")))
    (setq projectile-globally-ignored-file-suffixes
  	(append projectile-globally-ignored-file-suffixes '("#" "~"))))

#+end_src


* olivetti
#+begin_src elisp 
  (use-package olivetti
    :ensure t
    :config
    (setq olivetti-body-width 100)
    
    ;; Custom distraction-free function
    (defun my/distraction-free ()
      "Toggle distraction-free writing mode."
      (interactive)
      (if olivetti-mode
          (progn
            (olivetti-mode -1)
            (setq mode-line-format (default-value 'mode-line-format))
            (when (bound-and-p 'display-line-numbers)
              (setq display-line-numbers t)))
        (progn
          (olivetti-mode 1)
          (setq-local mode-line-format nil)
          (when (bound-and-p 'display-line-numbers)
            (setq display-line-numbers nil))))))
#+end_src
* lispyville
#+begin_src elisp
      ;; Disable cleverparens når lispyville overtager
    (use-package lispyville
      :ensure t
      :hook ((emacs-lisp-mode lisp-mode) . lispyville-mode)
      :config
      (lispyville-set-key-theme
       '(operators
         c-w
         slurp/barf-cp    ; Genbrug dine > og < muscle memory!
         prettify
         text-objects
         atom-movement
         additional))
      (add-hook 'org-src-mode-hook
          (lambda ()
            (when (derived-mode-p 'lisp-mode 
                                   'emacs-lisp-mode 
                                   'clojure-mode 
                                   'scheme-mode)
              (lispyville-mode 1)))))
    
      ;; (use-package lispyville
      ;;   :ensure t
      ;;   :hook ((emacs-lisp-mode lisp-mode) . lispyville-mode)
      ;;   :config
      ;;   ;; Start med kun navigation - cleverparens håndterer safety
      ;;   (lispyville-set-key-theme
      ;;    '(operators      ; H/J/K/L
      ;;      prettify)))    ; auto-indent
#+end_src

* treesit
#+begin_src elisp
  (use-package treesit
  :init
  ;; Emacs 29+ har tree-sitter built-in
  (setq treesit-language-source-alist
      '((c "https://github.com/tree-sitter/tree-sitter-c" "v0.20.6")
        (cpp "https://github.com/tree-sitter/tree-sitter-cpp" "v0.20.3")
        (python "https://github.com/tree-sitter/tree-sitter-python" "v0.20.4")
        (bash "https://github.com/tree-sitter/tree-sitter-bash" "v0.20.4")
        (rust "https://github.com/tree-sitter/tree-sitter-rust" "v0.20.4")
        (typst "https://github.com/Typst/typst/tree/main/emacs/typst-ts-mode")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")))


  :config
  ;; Install all defined grammars
  ;; (defun my/treesit-install-all-grammars ()
  ;;   "Install all tree-sitter grammars defined in `treesit-language-source-alist'."
  ;;   (interactive)
  ;;   (dolist (lang treesit-language-source-alist)
  ;;     (let ((lang-name (car lang)))
  ;;       (unless (treesit-language-available-p lang-name)
  ;;         (message "Installing %s grammar..." lang-name)
  ;;         (treesit-install-language-grammar lang-name)))))

  ;; Remap major modes to tree-sitter versions
  (setq major-mode-remap-alist
        '((c-mode . c-ts-mode)
          (c++-mode . c++-ts-mode)
          (python-mode . python-ts-mode)
          (bash-mode . bash-ts-mode)
          (css-mode . css-ts-mode)
          (javascript-mode . js-ts-mode)
          (json-mode . json-ts-mode)
          (rust-mode . rust-ts-mode))))

  ;; (use-package treesit-auto
  ;;   :ensure t
  ;;   :config
  ;;   (setq treesit-auto-install t)
  ;;   (global-treesit-auto-mode))
  ;; (add-to-list 'treesit-language-source-alist
  ;;              '((typst "https://github.com/uben0/tree-sitter-typst")
  ;;                (c "https://github.com/tree-sitter/tree-sitter-c")
  ;;                (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
  ;;                (python "https://github.com/tree-sitter/tree-sitter-python")
  ;;                (rust "https://github.com/tree-sitter/tree-sitter-rust")
  ;;                (typst "https://github.com/Typst/typst/tree/main/emacs/typst-ts-mode"))))

#+end_src
* websocket
#+begin_src elisp
  (use-package websocket
    :ensure t)
#+end_src
* typst
#+begin_src elisp 
  (use-package typst-ts-mode
    :ensure t ;;(:type git :host sourcehut :repo "meow_king/typst-ts-mode")
    :mode ("\\.typ\\'" . typst-ts-mode)
    :hook ((typst-ts-mode . lsp-deferred)))

  (use-package typst-preview
    :load-path "~/.emacs.d/elpa/typst-preview/" ;; if installed manually
    :after typst-ts-mode
    :init
    (setq typst-preview-autostart t) ; start typst preview automatically when typst-preview-mode is activated
    (setq typst-preview-open-browser-automatically t) ; open browser automatically when typst-preview-start is run
    :custom
    (typst-preview-browser "default") 	; this is the default option
    (typst-preview-invert-colors "auto")	; invert colors depending on system theme
    (typst-preview-executable "tinymist preview")) ; choose between tinymist and typst-preview (deprecated!)

#+end_src



